<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>VR街づくりテスト – CORS 安定版</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    body{margin:0;overflow:hidden;background:#000;}
    #startVR{
      position:fixed;top:20px;left:20px;z-index:10;
      padding:10px 20px;font-size:1.2em;
      background:#4CAF50;color:#fff;border:none;border-radius:5px;cursor:pointer;
    }
  </style>
</head>
<body>
<button id="startVR">VRモード開始</button>

<!-- three.js & GLTFLoader (グローバル版) -->
<script src="https://cdn.jsdelivr.net/npm/three@0.157.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.157.0/examples/js/loaders/GLTFLoader.js"></script>

<script>
/* ─── Renderer / Scene / Camera ────────────────── */
const renderer = new THREE.WebGLRenderer({antialias:true});
renderer.setPixelRatio(devicePixelRatio);
renderer.setSize(innerWidth,innerHeight);
renderer.xr.enabled = true;
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();

/* ─── スカイボックス (CORS OK) ───────────────── */
(function loadSky(){
  const loader = new THREE.CubeTextureLoader().setCrossOrigin('anonymous')
                .setPath('https://cdn.jsdelivr.net/gh/mrdoob/three.js@r157/examples/textures/cube/skyboxsun25deg/');
  loader.load(
    ['px.jpg','nx.jpg','py.jpg','ny.jpg','pz.jpg','nz.jpg'],
    tex => { tex.colorSpace = THREE.SRGBColorSpace; scene.background = tex; },
    undefined,
    /* 失敗時は単色の青空にフォールバック */
    () => { scene.background = new THREE.Color(0x87ceeb); console.warn('Skybox load failed – fallback to solid blue'); }
  );
})();

/* ─── ライト & 地面 ─────────────────────────── */
scene.add(new THREE.HemisphereLight(0xffffff,0x444444,0.8));
const sun = new THREE.DirectionalLight(0xffffff,1); sun.position.set(80,150,100); scene.add(sun);

const ground = new THREE.Mesh(
  new THREE.PlaneGeometry(1000,1000),
  new THREE.MeshStandardMaterial({color:0x3a923a})
);
ground.rotation.x = -Math.PI/2; scene.add(ground);

/* ─── プレイヤーリグ & デモキューブ ───────────── */
const rig = new THREE.Group(); scene.add(rig);
const cam = new THREE.PerspectiveCamera(70,innerWidth/innerHeight,0.1,1000);
cam.position.set(0,1.6,3); rig.add(cam);

const cube = new THREE.Mesh(new THREE.BoxGeometry(1,1,1),new THREE.MeshNormalMaterial());
cube.position.set(0,1.6,-4); scene.add(cube);

/* ─── 木モデルをロード (CORS ヘッダー有り) ────── */
new THREE.GLTFLoader().setCrossOrigin('anonymous')
  .load('https://cdn.jsdelivr.net/gh/mrdoob/three.js@r157/examples/models/gltf/Tree.glb',
    glb=>{
      for(let i=0;i<8;i++){
        const t=glb.scene.clone(true);
        t.scale.setScalar(0.8+Math.random()*0.6);
        t.position.set((Math.random()*2-1)*18,0,-8-Math.random()*25);
        scene.add(t);
      }
    },
    undefined,
    e=>console.error('Tree load error',e)
  );

/* ─── 入力 & ジャンプ ────────────────────────── */
const tmpF=new THREE.Vector3(), tmpR=new THREE.Vector3();
const MOVE=0.05, ROT=0.03, JUMP=0.18, GRAV=0.0098;
rig.userData.yv = 0; rig.userData.grounded = true;

renderer.setAnimationLoop((_,frame)=>{
  cube.rotation.x += 0.01; cube.rotation.y += 0.01;

  const ses = renderer.xr.getSession();
  if(ses && frame){
    for(const src of ses.inputSources){
      if(!src.gamepad) continue;
      const g=src.gamepad, xi=g.axes.length>=4?2:0, yi=xi+1;
      const x=g.axes[xi],  y=g.axes[yi];

      if(src.handedness==='left' && Math.hypot(x,y)>0.1){
        cam.getWorldDirection(tmpF); tmpF.y=0; tmpF.normalize();
        tmpR.crossVectors(cam.up,tmpF).normalize();
        rig.position.addScaledVector(tmpF,-y*MOVE).addScaledVector(tmpR,-x*MOVE);
      }
      if(src.handedness==='right'){
        if(Math.abs(x)>0.15) rig.rotation.y -= x*ROT;
        if(g.buttons[0]?.pressed && rig.userData.grounded){
          rig.userData.yv = JUMP; rig.userData.grounded = false;
        }
      }
    }
  }

  if(!rig.userData.grounded){
    rig.position.y += rig.userData.yv;
    rig.userData.yv -= GRAV;
    if(rig.position.y<=0){ rig.position.y=0; rig.userData.yv=0; rig.userData.grounded=true; }
  }

  renderer.render(scene,cam);
});

/* ─── VR 開始 ──────────────────────────────── */
document.getElementById('startVR').addEventListener('click',async()=>{
  if(!navigator.xr){alert('WebXR 非対応');return;}
  try{
    const s=await navigator.xr.requestSession('immersive-vr',{optionalFeatures:['local-floor']});
    const ref=await s.requestReferenceSpace('local-floor').catch(()=>s.requestReferenceSpace('local'));
    renderer.xr.setReferenceSpace(ref); renderer.xr.setSession(s);
  }catch(e){alert('VR 開始失敗:'+e.message);}
});

/* ─── リサイズ ────────────────────────────── */
addEventListener('resize',()=>{
  cam.aspect = innerWidth/innerHeight; cam.updateProjectionMatrix();
  renderer.setSize(innerWidth,innerHeight);
});
</script>
</body>
</html>