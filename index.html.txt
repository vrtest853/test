<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>VR街づくりテスト – スティック入れ替え & Aジャンプ</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/three@0.157.0/build/three.min.js"></script>
  <style>
    body { margin:0; overflow:hidden; background:black; }
    #startVR {
      position:fixed; top:20px; left:20px; z-index:10;
      padding:10px 20px; font-size:1.2em;
      background:#4CAF50; color:#fff; border:none; border-radius:5px;
      cursor:pointer;
    }
  </style>
</head>
<body>
<button id="startVR">VRモード開始</button>

<script>
/* ───── ベースセットアップ ───────────────────────────── */
const renderer = new THREE.WebGLRenderer({ antialias:true });
renderer.setSize(innerWidth, innerHeight);
renderer.xr.enabled = true;
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();
scene.background = new THREE.Color(0x222222);

/* プレイヤーリグ（カメラ殻） */
const playerRig = new THREE.Group();
scene.add(playerRig);

const camera = new THREE.PerspectiveCamera(70, innerWidth/innerHeight, 0.1, 1000);
camera.position.set(0, 1.6, 3);
playerRig.add(camera);

/* 環境ライト */
scene.add(new THREE.AmbientLight(0xffffff, 0.5));
const hemi = new THREE.HemisphereLight(0xffffff, 0x444444);
hemi.position.set(0, 10, 0);
scene.add(hemi);

/* 床・デモオブジェクト */
scene.add(new THREE.GridHelper(50, 50));

const cube = new THREE.Mesh(
  new THREE.BoxGeometry(1,1,1),
  new THREE.MeshNormalMaterial()
);
cube.position.set(0, 1.6, -4);
scene.add(cube);

const sphere = new THREE.Mesh(
  new THREE.SphereGeometry(0.7,32,32),
  new THREE.MeshBasicMaterial({ color:0x00ffff })
);
sphere.position.set(3, 2.0, -5);
scene.add(sphere);

/* 小ビル群 */
for (let i=-10;i<=10;i+=4){
  for (let j=-10;j<=10;j+=4){
    if(i===0&&j===0) continue;
    const h=Math.random()*5+2;
    const b=new THREE.Mesh(
      new THREE.BoxGeometry(1,h,1),
      new THREE.MeshStandardMaterial({ color:0x888888 })
    );
    b.position.set(i,h/2,j-10);
    scene.add(b);
  }
}

/* ───── 入力＆アニメーション ───────────────────────── */
const tmpFwd  = new THREE.Vector3();
const tmpSide = new THREE.Vector3();
const MOVE_SPEED = 0.05;     // m/フレーム
const ROT_SPEED  = 0.03;     // rad/フレーム
const GRAVITY    = 0.0098;   // 簡易重力

playerRig.userData.yVel = 0;         // 垂直速度
playerRig.userData.groundY = 0;      // 地面高さ
playerRig.userData.canJump = true;   // ジャンプ可否

renderer.setAnimationLoop((t, frame)=>{
  /* デモ回転 */
  cube.rotation.x += 0.01;
  cube.rotation.y += 0.01;
  sphere.rotation.y += 0.02;

  const session = renderer.xr.getSession();
  if(session && frame){
    for(const src of session.inputSources){
      if(!src.gamepad) continue;
      const g = src.gamepad;

      /* Quest: axes[2]/[3]、他: [0]/[1] */
      const xi = g.axes.length >= 4 ? 2 : 0;
      const yi = xi + 1;
      const x  = g.axes[xi];
      const y  = g.axes[yi];

      /* === 機能入れ替え ===
         右手: 移動＋ジャンプ
         左手: 回転                         */
      if(src.handedness === 'right'){
        /* ---- Aボタンでジャンプ ---- */
        const aPressed = g.buttons[0]?.pressed;
        if(aPressed && playerRig.userData.canJump){
          playerRig.userData.yVel  = 0.18;   // 初速度
          playerRig.userData.canJump = false;
        }

        /* ---- 右スティックで移動 ---- */
        if(Math.hypot(x,y) > 0.1){
          camera.getWorldDirection(tmpFwd);
          tmpFwd.y = 0; tmpFwd.normalize();
          tmpSide.crossVectors(camera.up, tmpFwd).normalize();
          playerRig.position
            .addScaledVector(tmpFwd, -y * MOVE_SPEED)   // 前後
            .addScaledVector(tmpSide,  x * MOVE_SPEED); // 左右（正方向）
        }

      }else if(src.handedness === 'left'){
        /* ---- 左スティックで回転 ---- */
        if(Math.abs(x) > 0.15){
          playerRig.rotation.y -= x * ROT_SPEED;
        }
      }
    }
  }

  /* ── ジャンプの垂直処理 ── */
  if(!playerRig.userData.canJump){
    playerRig.position.y += playerRig.userData.yVel;
    playerRig.userData.yVel -= GRAVITY;

    if(playerRig.position.y <= playerRig.userData.groundY){
      playerRig.position.y = playerRig.userData.groundY;
      playerRig.userData.yVel = 0;
      playerRig.userData.canJump = true;
    }
  }

  renderer.render(scene, camera);
});

/* ───── VRスタート ─────────────────────────────── */
document.getElementById('startVR').addEventListener('click', async()=>{
  if(!navigator.xr){ alert('WebXR 未対応'); return; }
  try{
    const session = await navigator.xr.requestSession('immersive-vr',{
      requiredFeatures:['local-floor']
    });
    renderer.xr.setReferenceSpaceType('local-floor');
    renderer.xr.setSession(session);
  }catch(e){
    alert('VR 開始失敗:'+e.message);
  }
});

/* リサイズ */
addEventListener('resize', ()=>{
  camera.aspect = innerWidth/innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(innerWidth, innerHeight);
});
</script>
</body>
</html>