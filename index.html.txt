<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>VR街づくりテスト – 左右スティック入替 & A/RT ジャンプ</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/three@0.157.0/build/three.min.js"></script>
  <style>
    body{margin:0;overflow:hidden;background:black;}
    #startVR{
      position:fixed;top:20px;left:20px;z-index:10;
      padding:10px 20px;font-size:1.2em;
      background:#4CAF50;color:#fff;border:none;border-radius:5px;
      cursor:pointer;
    }
  </style>
</head>
<body>
<button id="startVR">VRモード開始</button>

<script>
/* ─── 基本セットアップ ─────────────────────────────── */
const renderer = new THREE.WebGLRenderer({antialias:true});
renderer.setSize(innerWidth,innerHeight);
renderer.xr.enabled = true;
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();
scene.background = new THREE.Color(0x222222);

/* プレイヤーリグ */
const playerRig = new THREE.Group();
scene.add(playerRig);

const camera = new THREE.PerspectiveCamera(70,innerWidth/innerHeight,0.1,1000);
camera.position.set(0,1.6,3);
playerRig.add(camera);

/* ライト */
scene.add(new THREE.AmbientLight(0xffffff,0.5));
const hemi=new THREE.HemisphereLight(0xffffff,0x444444);
hemi.position.set(0,10,0);scene.add(hemi);

/* 床&デモオブジェクト */
scene.add(new THREE.GridHelper(50,50));
const cube=new THREE.Mesh(new THREE.BoxGeometry(1,1,1),new THREE.MeshNormalMaterial());
cube.position.set(0,1.6,-4);scene.add(cube);
const sphere=new THREE.Mesh(new THREE.SphereGeometry(0.7,32,32),new THREE.MeshBasicMaterial({color:0x00ffff}));
sphere.position.set(3,2,-5);scene.add(sphere);

/* 小ビル群 */
for(let i=-10;i<=10;i+=4){
  for(let j=-10;j<=10;j+=4){
    if(i===0&&j===0)continue;
    const h=Math.random()*5+2;
    const b=new THREE.Mesh(new THREE.BoxGeometry(1,h,1),new THREE.MeshStandardMaterial({color:0x888888}));
    b.position.set(i,h/2,j-10);scene.add(b);
  }
}

/* ─── 操作パラメータ ──────────────────────────────── */
const MOVE_SPEED=0.05;
const JUMP_SPEED=0.19;
const GRAVITY=0.0098;
const SNAP_ANGLE=Math.PI/4;   //45°
const SNAP_DEAD=0.7;
const SNAP_COOL=300;

playerRig.userData.yVel=0;
playerRig.userData.canJump=true;
let lastSnap=0;

/* ─── ループ ───────────────────────────────────── */
const tmpFwd=new THREE.Vector3();
const tmpRight=new THREE.Vector3();

renderer.setAnimationLoop((t,frame)=>{
  /* デモ */
  cube.rotation.x+=0.01;
  cube.rotation.y+=0.01;
  sphere.rotation.y+=0.02;

  const session=renderer.xr.getSession();
  if(session&&frame){
    for(const src of session.inputSources){
      if(!src.gamepad)continue;
      const g=src.gamepad;

      /* 軸 index */
      const xi=g.axes.length>=4?2:0;
      const yi=xi+1;
      const x=g.axes[xi];
      const y=g.axes[yi];

      /* prevButtons 初期化 */
      if(!src.userData.prevButtons){
        src.userData.prevButtons=g.buttons.map(b=>b.pressed);
      }

      /* ==== 右スティック：移動・ジャンプ ==== */
      if(src.handedness==='right'){
        /* 移動 */
        if(Math.hypot(x,y)>0.1){
          camera.getWorldDirection(tmpFwd);
          tmpFwd.y=0;tmpFwd.normalize();
          tmpRight.crossVectors(tmpFwd,camera.up).normalize();
          playerRig.position
                   .addScaledVector(tmpFwd,-y*MOVE_SPEED)
                   .addScaledVector(tmpRight, x*MOVE_SPEED);
        }

        /* ジャンプ (トリガー or A) */
        const triggerPressed = g.buttons[0]?.pressed; // RT
        const aPressed = g.buttons[4]?.pressed ?? g.buttons[0]?.pressed; // A=4 (Touch), fallback 0
        if((triggerPressed || aPressed) && playerRig.userData.canJump 
            && !src.userData.prevButtons.find((p,i)=>((i===0&&triggerPressed)||(i===4&&aPressed))&&p)){
          playerRig.userData.yVel=JUMP_SPEED;
          playerRig.userData.canJump=false;
        }

        /* 180°ターン (B=5) */
        const bPress=g.buttons[5]?.pressed;
        if(bPress&&!src.userData.prevButtons[5]){
          playerRig.rotation.y+=Math.PI;
        }
      }

      /* ==== 左スティック：スナップターン ==== */
      if(src.handedness==='left'){
        if(Math.abs(x)>SNAP_DEAD && t-lastSnap>SNAP_COOL){
          playerRig.rotation.y+=(x>0?-SNAP_ANGLE:SNAP_ANGLE);
          lastSnap=t;
        }
      }

      /* ボタン状態保存 */
      src.userData.prevButtons=g.buttons.map(b=>b.pressed);
    }
  }

  /* ジャンプ垂直処理 */
  if(!playerRig.userData.canJump){
    playerRig.position.y+=playerRig.userData.yVel;
    playerRig.userData.yVel-=GRAVITY;
    if(playerRig.position.y<=0){
      playerRig.position.y=0;
      playerRig.userData.yVel=0;
      playerRig.userData.canJump=true;
    }
  }

  renderer.render(scene,camera);
});

/* ─── VR開始 ───────────────────────────────────── */
document.getElementById('startVR').addEventListener('click',async()=>{
  if(!navigator.xr){alert('WebXR 未対応');return;}
  try{
    const s=await navigator.xr.requestSession('immersive-vr',{requiredFeatures:['local-floor']});
    renderer.xr.setReferenceSpaceType('local-floor');
    renderer.xr.setSession(s);
  }catch(e){alert('VR 開始失敗: '+e.message);}
});

/* リサイズ */
addEventListener('resize',()=>{
  camera.aspect=innerWidth/innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(innerWidth,innerHeight);
});
</script>
</body>
</html>