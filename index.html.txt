<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>押上・リアル街角VR完全版</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body { margin:0; overflow:hidden; background:#000; }
    #startVR {
      position:fixed; top:20px; left:20px; z-index:10;
      padding:10px 20px; font-size:1.2em;
      background:#4CAF50; color:#fff; border:none; border-radius:5px;
      cursor:pointer;
    }
  </style>
</head>
<body>
<button id="startVR">VRモード開始</button>

<script src="https://cdn.jsdelivr.net/npm/three@0.157.0/build/three.min.js"></script>

<script>
/* --- Three.js基本セットアップ --- */
const renderer = new THREE.WebGLRenderer({antialias:true});
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.xr.enabled = true;
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();
scene.background = new THREE.Color(0x02030a); // 夜空風

/* --- ライト --- */
scene.add(new THREE.HemisphereLight(0xffffff, 0x444444, 1.0));
const sun = new THREE.DirectionalLight(0xffffff, 1.0);
sun.position.set(100, 200, 100);
scene.add(sun);

/* --- カメラリグ --- */
const rig = new THREE.Group(); scene.add(rig);
const camera = new THREE.PerspectiveCamera(70, window.innerWidth/window.innerHeight, 0.1, 1000);
camera.position.set(0, 1.6, 30);
rig.add(camera);

/* --- 地面（都市地面） --- */
const ground = new THREE.Mesh(
  new THREE.PlaneGeometry(2000, 2000),
  new THREE.MeshStandardMaterial({color: 0x333333})
);
ground.rotation.x = -Math.PI/2;
scene.add(ground);

/* --- 街並み（商店街・住宅街） --- */
function createBuilding() {
  const house = new THREE.Group();
  const color = new THREE.Color(`hsl(${Math.random()*360},30%,70%)`);
  const body = new THREE.Mesh(
    new THREE.BoxGeometry(4+Math.random()*2, 3+Math.random()*3, 4+Math.random()*2),
    new THREE.MeshStandardMaterial({color})
  );
  body.position.y = body.geometry.parameters.height/2;
  house.add(body);

  // ドア
  const door = new THREE.Mesh(
    new THREE.BoxGeometry(0.8, 1.6, 0.1),
    new THREE.MeshStandardMaterial({color: 0x663300})
  );
  door.position.set(0, 0.8, body.geometry.parameters.depth/2 + 0.05);
  house.add(door);

  // 窓
  const windowMat = new THREE.MeshStandardMaterial({color: 0x99ccff, transparent:true, opacity:0.7});
  const numWin = 1+Math.floor(Math.random()*3);
  for (let i=0; i<numWin; i++) {
    const win = new THREE.Mesh(
      new THREE.BoxGeometry(0.8, 0.8, 0.05),
      windowMat
    );
    win.position.set(-1+Math.random()*2, 1.5+Math.random(), body.geometry.parameters.depth/2 + 0.05);
    house.add(win);
  }

  // 看板
  const sign = new THREE.Mesh(
    new THREE.BoxGeometry(2, 0.5, 0.1),
    new THREE.MeshStandardMaterial({color: 0xff9933})
  );
  sign.position.set(0, body.geometry.parameters.height + 0.5, body.geometry.parameters.depth/2 + 0.05);
  house.add(sign);

  return house;
}
for (let i=-5; i<=5; i++) {
  const b1 = createBuilding();
  b1.position.set(i*12, 0, -10);
  scene.add(b1);

  const b2 = createBuilding();
  b2.position.set(i*12, 0, 10);
  scene.add(b2);
}
for (let i=0; i<20; i++) {
  const b = createBuilding();
  b.position.set((Math.random()*2-1)*300, 0, (Math.random()*2-1)*300);
  b.rotation.y = Math.random()*Math.PI*2;
  scene.add(b);
}

/* --- 街灯 --- */
function createStreetLight() {
  const lightPost = new THREE.Group();

  const pole = new THREE.Mesh(
    new THREE.CylinderGeometry(0.05, 0.05, 4, 8),
    new THREE.MeshStandardMaterial({color: 0x666666})
  );
  pole.position.y = 2;
  lightPost.add(pole);

  const lamp = new THREE.PointLight(0xffffcc, 0.8, 10);
  lamp.position.set(0, 4, 0);
  lightPost.add(lamp);

  return lightPost;
}
for (let i=-5; i<=5; i++) {
  const lamp1 = createStreetLight();
  lamp1.position.set(i*20, 0, -15);
  scene.add(lamp1);

  const lamp2 = createStreetLight();
  lamp2.position.set(i*20, 0, 15);
  scene.add(lamp2);
}

/* --- ベンチ --- */
function createBench() {
  const bench = new THREE.Group();

  const seat = new THREE.Mesh(
    new THREE.BoxGeometry(2, 0.2, 0.5),
    new THREE.MeshStandardMaterial({color: 0x996633})
  );
  seat.position.y = 0.4;
  bench.add(seat);

  const legs = [];
  for (let dx of [-0.8, 0.8]) {
    const leg = new THREE.Mesh(
      new THREE.BoxGeometry(0.1, 0.4, 0.1),
      new THREE.MeshStandardMaterial({color: 0x333333})
    );
    leg.position.set(dx, 0.2, 0);
    bench.add(leg);
  }

  return bench;
}
for (let i=-2; i<=2; i++) {
  const bench = createBench();
  bench.position.set(i*15, 0, 20);
  scene.add(bench);
}

/* --- 街の木 --- */
function createTree() {
  const tree = new THREE.Group();

  const trunk = new THREE.Mesh(
    new THREE.CylinderGeometry(0.2, 0.3, 2, 8),
    new THREE.MeshStandardMaterial({color: 0x8B4513})
  );
  trunk.position.y = 1;
  tree.add(trunk);

  const leaves = new THREE.Mesh(
    new THREE.SphereGeometry(1.5, 16, 16),
    new THREE.MeshStandardMaterial({color: 0x228822})
  );
  leaves.position.y = 3;
  tree.add(leaves);

  return tree;
}
for (let i=0; i<10; i++) {
  const tree = createTree();
  tree.position.set((Math.random()*2-1)*300, 0, (Math.random()*2-1)*300);
  scene.add(tree);
}

/* --- VR移動＆ジャンプ設定 --- */
const tmpF = new THREE.Vector3(), tmpR = new THREE.Vector3();
const MOVE = 0.05, ROT = 0.03, JUMP = 0.18, GRAV = 0.0098;
rig.userData.yv = 0; rig.userData.grounded = true;

renderer.setAnimationLoop((_, frame) => {
  const ses = renderer.xr.getSession();
  if (ses && frame) {
    for (const src of ses.inputSources) {
      if (!src.gamepad) continue;
      const g = src.gamepad;
      const xi = g.axes.length>=4 ? 2:0, yi = xi+1;
      const x = g.axes[xi], y = g.axes[yi];

      if (src.handedness === 'left' && Math.hypot(x,y) > 0.1) {
        camera.getWorldDirection(tmpF); tmpF.y=0; tmpF.normalize();
        tmpR.crossVectors(camera.up,tmpF).normalize();
        rig.position
          .addScaledVector(tmpF, -y * MOVE)
          .addScaledVector(tmpR, -x * MOVE);
      }
      if (src.handedness === 'right') {
        if (Math.abs(x) > 0.15) rig.rotation.y -= x * ROT;
        if (g.buttons[0]?.pressed && rig.userData.grounded) {
          rig.userData.yv = JUMP;
          rig.userData.grounded = false;
        }
      }
    }
  }

  if (!rig.userData.grounded) {
    rig.position.y += rig.userData.yv;
    rig.userData.yv -= GRAV;
    if (rig.position.y <= 0) {
      rig.position.y = 0;
      rig.userData.yv = 0;
      rig.userData.grounded = true;
    }
  }

  renderer.render(scene, camera);
});

/* --- VR開始 --- */
document.getElementById('startVR').addEventListener('click', async () => {
  if (!navigator.xr) { alert('WebXR非対応'); return; }
  try {
    const session = await navigator.xr.requestSession('immersive-vr', { optionalFeatures: ['local-floor'] });
    const ref = await session.requestReferenceSpace('local-floor').catch(() => session.requestReferenceSpace('local'));
    renderer.xr.setReferenceSpace(ref);
    renderer.xr.setSession(session);
  } catch (e) { alert('VR開始失敗: '+e.message); }
});

/* --- リサイズ対応 --- */
addEventListener('resize', () => {
  camera.aspect = window.innerWidth/window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});
</script>
</body>
</html>