<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>押上・スカイツリーVR完全版</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body { margin:0; overflow:hidden; background:#000; }
    #startVR {
      position:fixed; top:20px; left:20px; z-index:10;
      padding:10px 20px; font-size:1.2em;
      background:#4CAF50; color:#fff; border:none; border-radius:5px;
      cursor:pointer;
    }
  </style>
</head>
<body>
<button id="startVR">VRモード開始</button>

<script src="https://cdn.jsdelivr.net/npm/three@0.157.0/build/three.min.js"></script>

<script>
/* --- Three.js 基本セットアップ --- */
const renderer = new THREE.WebGLRenderer({antialias:true});
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.xr.enabled = true;
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();
scene.background = new THREE.Color(0x02030a); // 夜空風

/* --- ライト --- */
scene.add(new THREE.HemisphereLight(0xffffff, 0x444444, 1.0));
const sun = new THREE.DirectionalLight(0xffffff, 1.0);
sun.position.set(100, 200, 100);
scene.add(sun);

/* --- カメラリグ --- */
const rig = new THREE.Group(); scene.add(rig);
const camera = new THREE.PerspectiveCamera(70, window.innerWidth/window.innerHeight, 0.1, 1000);
camera.position.set(0, 1.6, 30);
rig.add(camera);

/* --- 地面（アスファルト） --- */
const ground = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshStandardMaterial({color: 0x333333})
);
ground.rotation.x = -Math.PI/2;
scene.add(ground);

/* --- 隅田川（川エリア） --- */
const river = new THREE.Mesh(
  new THREE.PlaneGeometry(200, 30),
  new THREE.MeshStandardMaterial({color: 0x2233aa, transparent:true, opacity:0.8})
);
river.rotation.x = -Math.PI/2;
river.position.set(-100, 0.01, -100);
scene.add(river);

/* --- スカイツリー建設 --- */
const skyTree = new THREE.Group();
const base = new THREE.Mesh(
  new THREE.CylinderGeometry(2, 6, 50, 32),
  new THREE.MeshStandardMaterial({color: 0xCCCCCC})
);
base.position.y = 25;
skyTree.add(base);

const observatory1 = new THREE.Mesh(
  new THREE.CylinderGeometry(8, 8, 3, 64),
  new THREE.MeshStandardMaterial({color: 0x3399FF, transparent:true, opacity:0.5, emissive: 0x3399FF})
);
observatory1.position.y = 50;
skyTree.add(observatory1);

const upper = new THREE.Mesh(
  new THREE.CylinderGeometry(1, 2, 30, 32),
  new THREE.MeshStandardMaterial({color: 0xCCCCCC})
);
upper.position.y = 67;
skyTree.add(upper);

const observatory2 = new THREE.Mesh(
  new THREE.CylinderGeometry(4, 4, 1.5, 32),
  new THREE.MeshStandardMaterial({color: 0x3399FF, transparent:true, opacity:0.5, emissive: 0x3399FF})
);
observatory2.position.y = 83;
skyTree.add(observatory2);

const antenna = new THREE.Mesh(
  new THREE.CylinderGeometry(0.2, 0.5, 20, 16),
  new THREE.MeshStandardMaterial({color: 0xAAAAAA})
);
antenna.position.y = 95;
skyTree.add(antenna);

const skyLight = new THREE.PointLight(0x3399FF, 2, 200);
skyLight.position.set(0, 50, 0);
skyTree.add(skyLight);

skyTree.position.set(0, 0, 0);
scene.add(skyTree);

/* --- 押上駅ビル（駅施設） --- */
const station = new THREE.Mesh(
  new THREE.BoxGeometry(30, 5, 20),
  new THREE.MeshStandardMaterial({color: 0x999999})
);
station.position.set(30, 2.5, 20);
scene.add(station);

/* --- ソラマチモール群（ショッピングエリア） --- */
function createMall() {
  const mall = new THREE.Mesh(
    new THREE.BoxGeometry(
      5 + Math.random()*5,
      3 + Math.random()*2,
      5 + Math.random()*5
    ),
    new THREE.MeshStandardMaterial({color: new THREE.Color(`hsl(${Math.random()*360},30%,60%)`)})
  );
  return mall;
}
for (let i = 0; i < 20; i++) {
  const mall = createMall();
  mall.position.set(
    10 + Math.random()*40,
    mall.geometry.parameters.height/2,
    -20 + Math.random()*40
  );
  scene.add(mall);
}

/* --- 街並みビル群（住宅・商店） --- */
function createBuilding() {
  const building = new THREE.Mesh(
    new THREE.BoxGeometry(
      3 + Math.random()*3,
      5 + Math.random()*10,
      3 + Math.random()*3
    ),
    new THREE.MeshStandardMaterial({color: new THREE.Color(`hsl(${Math.random()*360},40%,50%)`)})
  );
  return building;
}
for (let i = 0; i < 50; i++) {
  const bld = createBuilding();
  bld.position.set(
    (Math.random() * 2 - 1) * 300,
    bld.geometry.parameters.height/2,
    (Math.random() * 2 - 1) * 300
  );
  scene.add(bld);
}

/* --- 移動＆ジャンプ設定 --- */
const tmpF = new THREE.Vector3(), tmpR = new THREE.Vector3();
const MOVE = 0.05, ROT = 0.03, JUMP = 0.18, GRAV = 0.0098;
rig.userData.yv = 0; rig.userData.grounded = true;

renderer.setAnimationLoop((_, frame) => {
  const ses = renderer.xr.getSession();
  if (ses && frame) {
    for (const src of ses.inputSources) {
      if (!src.gamepad) continue;
      const g = src.gamepad;
      const xi = g.axes.length>=4 ? 2:0, yi = xi+1;
      const x = g.axes[xi], y = g.axes[yi];

      if (src.handedness === 'left' && Math.hypot(x,y) > 0.1) {
        camera.getWorldDirection(tmpF); tmpF.y=0; tmpF.normalize();
        tmpR.crossVectors(camera.up,tmpF).normalize();
        rig.position
          .addScaledVector(tmpF, -y*MOVE)
          .addScaledVector(tmpR, -x*MOVE);
      }
      if (src.handedness === 'right') {
        if (Math.abs(x) > 0.15) rig.rotation.y -= x*ROT;
        if (g.buttons[0]?.pressed && rig.userData.grounded) {
          rig.userData.yv = JUMP;
          rig.userData.grounded = false;
        }
      }
    }
  }

  if (!rig.userData.grounded) {
    rig.position.y += rig.userData.yv;
    rig.userData.yv -= GRAV;
    if (rig.position.y <= 0) {
      rig.position.y = 0;
      rig.userData.yv = 0;
      rig.userData.grounded = true;
    }
  }

  renderer.render(scene, camera);
});

/* --- VRモード開始 --- */
document.getElementById('startVR').addEventListener('click', async () => {
  if (!navigator.xr) { alert('WebXR非対応'); return; }
  try {
    const session = await navigator.xr.requestSession('immersive-vr', { optionalFeatures: ['local-floor'] });
    const ref = await session.requestReferenceSpace('local-floor').catch(() => session.requestReferenceSpace('local'));
    renderer.xr.setReferenceSpace(ref);
    renderer.xr.setSession(session);
  } catch (e) { alert('VR開始失敗: ' + e.message); }
});

/* --- リサイズ対応 --- */
addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});
</script>
</body>
</html>