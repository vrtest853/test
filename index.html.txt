<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>VR街づくりテスト</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/three@0.150.1/build/three.min.js"></script>
  <style>
    body { margin: 0; overflow: hidden; background: black; }
    #startVR {
      position: absolute;
      top: 20px;
      left: 20px;
      padding: 10px 20px;
      font-size: 1.2em;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      z-index: 10;
    }
  </style>
</head>
<body>

<button id="startVR">VRモード開始</button>

<script>
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.xr.enabled = true;
  document.body.appendChild(renderer.domElement);

  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0x222222);
  const camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.set(0, 1.6, 3);

  // ライト
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
  scene.add(ambientLight);

  const light = new THREE.HemisphereLight(0xffffff, 0x444444);
  light.position.set(0, 10, 0);
  scene.add(light);

  // グリッド床
  const gridHelper = new THREE.GridHelper(50, 50);
  scene.add(gridHelper);

  // メインの立方体
  const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
  const cubeMaterial = new THREE.MeshNormalMaterial();
  const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
  cube.position.set(0, 1.6, -4);
  scene.add(cube);

  // 光るエネルギー球体
  const sphereGeometry = new THREE.SphereGeometry(0.7, 32, 32);
  const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0x00ffff });
  const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
  sphere.position.set(3, 2.0, -5);
  scene.add(sphere);

  // 小さなビル（ボックス）をたくさん配置して街っぽく
  for (let i = -10; i <= 10; i += 4) {
    for (let j = -10; j <= 10; j += 4) {
      if (i === 0 && j === 0) continue; // 真ん中は開けとく
      const buildingGeometry = new THREE.BoxGeometry(1, Math.random() * 5 + 2, 1);
      const buildingMaterial = new THREE.MeshStandardMaterial({ color: 0x888888 });
      const building = new THREE.Mesh(buildingGeometry, buildingMaterial);
      building.position.set(i, building.geometry.parameters.height / 2, j - 10);
      scene.add(building);
    }
  }

  let vrSession = null;

  function normalAnimate() {
    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;
    sphere.rotation.y += 0.02;
    renderer.render(scene, camera);
    requestAnimationFrame(normalAnimate);
  }

  function vrAnimate() {
    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;
    sphere.rotation.y += 0.02;
    renderer.render(scene, camera);
  }

  normalAnimate();

  document.getElementById('startVR').addEventListener('click', async () => {
    if (navigator.xr) {
      if (!vrSession) {
        try {
          vrSession = await navigator.xr.requestSession('immersive-vr', {
            requiredFeatures: ['local-floor']
          });
          renderer.xr.setReferenceSpaceType('local-floor');
          renderer.xr.setSession(vrSession);
          renderer.setAnimationLoop(vrAnimate);

          vrSession.addEventListener('end', () => {
            vrSession = null;
            renderer.setAnimationLoop(null);
            normalAnimate();
          });
        } catch (e) {
          alert('VRセッション開始に失敗しました: ' + e.message);
        }
      } else {
        alert('すでにVRセッション中です！');
      }
    } else {
      alert('WebXR非対応です');
    }
  });

  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

</script>

</body>
</html>