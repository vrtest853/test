<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>VR街づくりテスト – コントローラー移動対応版</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/three@0.157.0/build/three.min.js"></script>
  <style>
    body { margin: 0; overflow: hidden; background: black; }
    #startVR {
      position: absolute; top: 20px; left: 20px;
      padding: 10px 20px; font-size: 1.2em;
      background:#4CAF50; color:#fff; border:none;
      border-radius:5px; cursor:pointer; z-index:10;
    }
  </style>
</head>
<body>
<button id="startVR">VRモード開始</button>

<script>
/* ─── 基本セットアップ ───────────────────────────── */
const renderer = new THREE.WebGLRenderer({ antialias:true });
renderer.setSize(innerWidth, innerHeight);
renderer.xr.enabled = true;
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();
scene.background = new THREE.Color(0x222222);

/* カメラを入れる“外側の殻”を用意 */
const playerRig = new THREE.Group();
scene.add(playerRig);

const camera = new THREE.PerspectiveCamera(70, innerWidth/innerHeight, 0.1, 1000);
camera.position.set(0, 1.6, 3);        // 身長 1.6 m
playerRig.add(camera);

/* ライトなどはそのまま */
scene.add(new THREE.AmbientLight(0xffffff, 0.5));
const hemi = new THREE.HemisphereLight(0xffffff, 0x444444);
hemi.position.set(0, 10, 0);
scene.add(hemi);

/* グリッド床・建物・小物など – 省略せず再利用 */
const grid = new THREE.GridHelper(50, 50);
scene.add(grid);

const cube = new THREE.Mesh(new THREE.BoxGeometry(1,1,1), new THREE.MeshNormalMaterial());
cube.position.set(0, 1.6, -4);
scene.add(cube);

const sphere = new THREE.Mesh(new THREE.SphereGeometry(0.7,32,32),
                              new THREE.MeshBasicMaterial({color:0x00ffff}));
sphere.position.set(3, 2.0, -5);
scene.add(sphere);

for (let i=-10;i<=10;i+=4){
  for (let j=-10;j<=10;j+=4){
    if(i===0&&j===0) continue;
    const h=Math.random()*5+2;
    const b=new THREE.Mesh(new THREE.BoxGeometry(1,h,1),
                           new THREE.MeshStandardMaterial({color:0x888888}));
    b.position.set(i,h/2,j-10);
    scene.add(b);
  }
}

/* ─── コントローラー入力セットアップ ───────────────── */
let leftCtrl=null, rightCtrl=null;

function setupController(index){
  const ctrl = renderer.xr.getController(index);
  ctrl.addEventListener('connected', (e)=>{
    ctrl.userData.gamepad = e.data.gamepad;   // axes / buttons
    if(e.data.handedness === 'left')  leftCtrl  = ctrl;
    if(e.data.handedness === 'right') rightCtrl = ctrl;
  });
  ctrl.addEventListener('disconnected', ()=>{
    if(ctrl===leftCtrl)  leftCtrl = null;
    if(ctrl===rightCtrl) rightCtrl = null;
  });
  scene.add(ctrl);
}
setupController(0);
setupController(1);

/* ─── アニメーションループ ─────────────────────────── */
const tmpVec = new THREE.Vector3();
const speed   = 0.05;   // m/フレーム（≈3 m/s）
const rotSpeed= 0.03;   // rad/フレーム

renderer.setAnimationLoop(()=>{
  /* 回転デモ */
  cube.rotation.x += 0.01;
  cube.rotation.y += 0.01;
  sphere.rotation.y += 0.02;

  /* ── 1) 左スティックで移動 ── */
  if(leftCtrl && leftCtrl.userData.gamepad){
    const [lx, ly] = leftCtrl.userData.gamepad.axes;
    if(Math.abs(lx)+Math.abs(ly) > 0.05){      // デッドゾーン
      // カメラの向きを基準に、水平面ベクトルを作る
      camera.getWorldDirection(tmpVec);
      tmpVec.y = 0; tmpVec.normalize();        // 前方
      const side = new THREE.Vector3().crossVectors(camera.up, tmpVec).normalize(); // 右
      playerRig.position
               .addScaledVector(tmpVec, -ly * speed)   // 前後
               .addScaledVector(side,  lx * speed);    // 左右
    }
  }

  /* ── 2) 右スティックで視点回転 ── */
  if(rightCtrl && rightCtrl.userData.gamepad){
    const [rx, ry] = rightCtrl.userData.gamepad.axes;
    if(Math.abs(rx) > 0.1){
      playerRig.rotation.y -= rx * rotSpeed;   // 水平回転
    }
    // 必要なら上下視点 (ry) も clamp して camera.rotation.x に反映
  }

  renderer.render(scene, camera);
});

/* ─── VRセッション開始ボタン ───────────────────────── */
document.getElementById('startVR').addEventListener('click', async ()=>{
  if(!navigator.xr){ alert('WebXR未対応'); return; }
  try{
    const session = await navigator.xr.requestSession('immersive-vr',{
      requiredFeatures:['local-floor']
    });
    renderer.xr.setReferenceSpaceType('local-floor');
    renderer.xr.setSession(session);
  }catch(e){
    alert('VR開始失敗:'+e.message);
  }
});

/* ─── 画面リサイズ対応 ──────────────────────────── */
window.addEventListener('resize', ()=>{
  camera.aspect = innerWidth/innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(innerWidth, innerHeight);
});
</script>
</body>
</html>