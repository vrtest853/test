<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=no"/>
<title>Quest WebXR Starter</title>
<style>body{margin:0;overflow:hidden;background:#000}</style>

<!-- three.js r176 を CDN から取得 -->
<script type="importmap">
{
  "imports":{
    "three":"https://cdn.jsdelivr.net/npm/three@0.176.0/build/three.module.js",
    "three/addons/":"https://cdn.jsdelivr.net/npm/three@0.176.0/examples/jsm/"
  }
}
</script>
</head>
<body>

<script type="module">
import * as THREE from 'three';
import {VRButton} from 'three/addons/webxr/VRButton.js';
import {XRControllerModelFactory} from 'three/addons/webxr/XRControllerModelFactory.js';
import {GridHelper} from 'three/src/helpers/GridHelper.js';

////////////////////////////////////////////////////////////
// 1) 基本セットアップ
////////////////////////////////////////////////////////////
const scene   = new THREE.Scene();
const camera  = new THREE.PerspectiveCamera(70, innerWidth/innerHeight, 0.1, 100);

const renderer = new THREE.WebGLRenderer({antialias:true});
renderer.setPixelRatio(devicePixelRatio);
renderer.setSize(innerWidth, innerHeight);
renderer.xr.enabled = true;
document.body.appendChild(renderer.domElement);
document.body.appendChild(VRButton.createButton(renderer));

// 簡易環境（床グリッド & ライト）
scene.add(new THREE.AmbientLight(0xffffff, 0.3));
const dir = new THREE.DirectionalLight(0xffffff, 1);
dir.position.set(5, 10, 2);
scene.add(dir);

const grid = new THREE.GridHelper(20, 20, 0x444444, 0x222222);
scene.add(grid);

////////////////////////////////////////////////////////////
// 2) プレイヤーリグ（移動処理はこのグループを動かす）
////////////////////////////////////////////////////////////
const player = new THREE.Group();
player.position.set(0, 1.6, 3);        // 初期高さ 1.6 m
player.add(camera);
scene.add(player);

////////////////////////////////////////////////////////////
// 3) オブジェクト：色が変わるターゲット
////////////////////////////////////////////////////////////
const boxGeo = new THREE.BoxGeometry(0.4,0.4,0.4);
const boxMat = new THREE.MeshStandardMaterial({color:0x00aaff});
const cube   = new THREE.Mesh(boxGeo, boxMat);
cube.position.set(0,1.4,-2);
scene.add(cube);

////////////////////////////////////////////////////////////
// 4) コントローラ & レーザー
////////////////////////////////////////////////////////////
const controllerModelFactory = new XRControllerModelFactory();
const rayGeom = new THREE.BufferGeometry().setFromPoints(
  [new THREE.Vector3(0,0,0), new THREE.Vector3(0,0,-1)]
);

const controllers = [];
[0,1].forEach(i=>{
  const ctrl      = renderer.xr.getController(i);
  ctrl.add(new THREE.Line(rayGeom,new THREE.LineBasicMaterial({color:0xffff00})));
  ctrl.userData.raycaster = new THREE.Raycaster();
  ctrl.addEventListener('selectstart',onSelect);
  scene.add(ctrl);

  const grip = renderer.xr.getControllerGrip(i);
  grip.add(controllerModelFactory.createControllerModel(grip));
  scene.add(grip);

  controllers.push(ctrl);
});

function onSelect(e){
  const ctrl = e.target;
  const inter = intersectObjects(ctrl);
  if(inter){
    inter.material.color.setHex(Math.random()*0xffffff);
  }
}

function intersectObjects(ctrl){
  const tempMat = new THREE.Matrix4();
  tempMat.identity().extractRotation(ctrl.matrixWorld);
  ctrl.userData.raycaster.ray.origin.setFromMatrixPosition(ctrl.matrixWorld);
  ctrl.userData.raycaster.ray.direction.set(0,0,-1).applyMatrix4(tempMat);
  const intersects = ctrl.userData.raycaster.intersectObject(cube);
  return intersects[0]?.object || null;
}

////////////////////////////////////////////////////////////
// 5) スティック移動（前進・後退）／スナップ回転
////////////////////////////////////////////////////////////
const clock = new THREE.Clock();
const speed = 3;               // m/s
const snapAngle = THREE.MathUtils.degToRad(30);
let prevStickY = 0, prevStickX = 0;

function handleGamepad(ctrl,dt){
  const gp = ctrl?.inputSource?.gamepad;
  if(!gp || gp.axes.length<4) return;

  const [x, y] = gp.axes;      // x=左右, y=上下 ※Quest は (x,y)=(stickX,stickY)

  // 前後移動
  if(Math.abs(y) > 0.2){
    const dir = new THREE.Vector3(0,0,-y*dt*speed);
    dir.applyQuaternion(camera.quaternion);
    player.position.add(dir);
  }

  // スナップ回転（左/右）スティック横倒し
  if(Math.abs(x) > 0.6 && Math.abs(prevStickX) <= 0.6){
    player.rotation.y -= Math.sign(x)*snapAngle;
  }
  prevStickX = x;
}

////////////////////////////////////////////////////////////
// 6) レンダーループ
////////////////////////////////////////////////////////////
function animate(){
  const dt = clock.getDelta();
  controllers.forEach(c=>handleGamepad(c,dt));
  renderer.render(scene, camera);
}
renderer.setAnimationLoop(animate);

////////////////////////////////////////////////////////////
// 7) リサイズ
////////////////////////////////////////////////////////////
addEventListener('resize',()=>{
  camera.aspect = innerWidth/innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(innerWidth, innerHeight);
});
</script>
</body>
</html>